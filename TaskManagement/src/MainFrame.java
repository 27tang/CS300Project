
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Xuan Tang
 * 
 * The MainFrame class is the main Graphical User Inteface for the Task Management
 * program. It consists of the login screen and the user session.
 * It allows a user to log in and load their tasks which will be displayed 
 * at the user session screen. User can then interact with the buttons and items 
 * to manage their tasks.
 */
public class MainFrame extends javax.swing.JFrame {
    
    private String username;
    private String userfile;
    private TaskLists taskLists;
    
    /**
     * Constructor for MainFrame. calls the initComponenets autogenerated code, sets teh colors of the tables, background and content pane
     * also disables the close button so that the only way to exit is to click the exit button
     */
    public MainFrame() {
        initComponents();
        //settiing up table colors
        toDoScroll.getViewport().setBackground(Color.BLACK);
        toDoTable.getTableHeader().setDefaultRenderer(new TableHeaderRenderer());
        inProgressScroll.getViewport().setBackground(Color.BLACK);
        inProgressTable.getTableHeader().setDefaultRenderer(new TableHeaderRenderer());
        doneScroll.getViewport().setBackground(Color.BLACK);
        doneTable.getTableHeader().setDefaultRenderer(new TableHeaderRenderer());
        toDoTable.setDefaultRenderer(Object.class, new TaskRenderer());
        inProgressTable.setDefaultRenderer(Object.class, new TaskRenderer());
        doneTable.setDefaultRenderer(Object.class, new TaskRenderer());
        this.getContentPane().setBackground(Color.BLACK);
        
        //disables the top right corner X button
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    
    }
    /**
     * tells the tables to update their data, and also set all the tables and button to visible again
     * 
     */
    public void refreshDisplay(){
        toDoTable.setVisible(true);
        DefaultTableModel m = (DefaultTableModel)toDoTable.getModel();
        m.fireTableDataChanged();
        inProgressTable.setVisible(true);
        m = (DefaultTableModel)inProgressTable.getModel();
        m.fireTableDataChanged();
        doneTable.setVisible(true);
        m = (DefaultTableModel)doneTable.getModel();
        m.fireTableDataChanged();
        logOutButton.setVisible(true);
        createTaskButton.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskDetailDialog = new javax.swing.JDialog();
        nameDetailLabel = new javax.swing.JLabel();
        dateDetailLabel = new javax.swing.JLabel();
        priorityDetailLabel = new javax.swing.JLabel();
        nameDetail = new javax.swing.JLabel();
        dateDetail = new javax.swing.JLabel();
        priorityDetail = new javax.swing.JLabel();
        jOptionPane2 = new javax.swing.JOptionPane();
        mainPanel = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        usernameTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        mainTitleLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        authenticationErrorLabel = new javax.swing.JLabel();
        userSessionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        toDoScroll = new javax.swing.JScrollPane();
        toDoTable = new javax.swing.JTable();
        inProgressScroll = new javax.swing.JScrollPane();
        inProgressTable = new javax.swing.JTable();
        doneScroll = new javax.swing.JScrollPane();
        doneTable = new javax.swing.JTable();
        createTaskButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();

        nameDetailLabel.setText("Task:");

        dateDetailLabel.setText("Deadline:");

        priorityDetailLabel.setText("Priority:");

        nameDetail.setText("Golbledoop");

        dateDetail.setText("GobleDate");

        priorityDetail.setText("HIGH");

        javax.swing.GroupLayout taskDetailDialogLayout = new javax.swing.GroupLayout(taskDetailDialog.getContentPane());
        taskDetailDialog.getContentPane().setLayout(taskDetailDialogLayout);
        taskDetailDialogLayout.setHorizontalGroup(
            taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskDetailDialogLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameDetailLabel)
                    .addComponent(dateDetailLabel)
                    .addComponent(priorityDetailLabel))
                .addGap(46, 46, 46)
                .addGroup(taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priorityDetail)
                    .addComponent(dateDetail)
                    .addComponent(nameDetail))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        taskDetailDialogLayout.setVerticalGroup(
            taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskDetailDialogLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameDetailLabel)
                    .addComponent(nameDetail))
                .addGap(26, 26, 26)
                .addGroup(taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateDetailLabel)
                    .addComponent(dateDetail))
                .addGap(31, 31, 31)
                .addGroup(taskDetailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityDetailLabel)
                    .addComponent(priorityDetail))
                .addContainerGap(128, Short.MAX_VALUE))
        );

        jOptionPane2.setBackground(new java.awt.Color(169, 32, 32));
        jOptionPane2.setForeground(new java.awt.Color(255, 0, 0));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Management");
        setBackground(new java.awt.Color(255, 0, 0));
        setForeground(new java.awt.Color(248, 28, 28));

        mainPanel.setLayout(new java.awt.CardLayout());

        loginPanel.setBackground(new java.awt.Color(20, 10, 10));
        loginPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(246, 162, 174), new java.awt.Color(1, 1, 1)));
        loginPanel.setForeground(new java.awt.Color(193, 176, 176));

        usernameTextField.setBackground(new java.awt.Color(26, 0, 0));
        usernameTextField.setForeground(new java.awt.Color(254, 202, 202));
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        usernameLabel.setBackground(new java.awt.Color(253, 190, 190));
        usernameLabel.setForeground(new java.awt.Color(253, 190, 190));
        usernameLabel.setText("Username:");

        passwordLabel.setForeground(new java.awt.Color(253, 190, 190));
        passwordLabel.setText("Password:");

        passwordField.setBackground(new java.awt.Color(26, 0, 0));
        passwordField.setForeground(new java.awt.Color(254, 202, 202));
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(29, 1, 1));
        loginButton.setForeground(new java.awt.Color(252, 212, 212));
        loginButton.setText("Log In");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        mainTitleLabel.setFont(new java.awt.Font("Estrangelo Antioch", 1, 24)); // NOI18N
        mainTitleLabel.setForeground(new java.awt.Color(253, 190, 190));
        mainTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitleLabel.setText("Task Management");

        exitButton.setBackground(new java.awt.Color(29, 1, 1));
        exitButton.setForeground(new java.awt.Color(252, 212, 212));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        authenticationErrorLabel.setBackground(new java.awt.Color(254, 226, 226));
        authenticationErrorLabel.setForeground(new java.awt.Color(254, 226, 226));
        authenticationErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        authenticationErrorLabel.setText("Please enter your username and password.");

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel))
                        .addGap(37, 37, 37)
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordField)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)))
                    .addComponent(authenticationErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(mainTitleLabel)
                .addGap(33, 33, 33)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addGap(18, 18, 18)
                .addComponent(authenticationErrorLabel)
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(loginButton))
                .addContainerGap(166, Short.MAX_VALUE))
        );

        mainPanel.add(loginPanel, "card2");

        userSessionPanel.setBackground(new java.awt.Color(7, 2, 15));
        userSessionPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(32, 2, 27), new java.awt.Color(132, 148, 253), java.awt.Color.darkGray, java.awt.Color.black));
        userSessionPanel.setForeground(new java.awt.Color(86, 83, 83));

        jLabel1.setFont(new java.awt.Font("Estrangelo Midyat", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(196, 203, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Task Management");

        toDoScroll.setBackground(new java.awt.Color(179, 96, 96));
        toDoScroll.setForeground(new java.awt.Color(50, 50, 50));

        toDoTable.setBackground(new java.awt.Color(2, 3, 16));
        toDoTable.setFont(new java.awt.Font("Estrangelo TurAbdin", 0, 18)); // NOI18N
        toDoTable.setForeground(new java.awt.Color(254, 254, 254));
        toDoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "To Do"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toDoTable.setColumnSelectionAllowed(true);
        toDoTable.setDragEnabled(true);
        toDoTable.setSelectionBackground(new java.awt.Color(4, 2, 24));
        toDoTable.setSelectionForeground(new java.awt.Color(254, 254, 254));
        toDoTable.getTableHeader().setReorderingAllowed(false);
        toDoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toDoTableMouseClicked(evt);
            }
        });
        toDoScroll.setViewportView(toDoTable);
        toDoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (toDoTable.getColumnModel().getColumnCount() > 0) {
            toDoTable.getColumnModel().getColumn(0).setResizable(false);
            toDoTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        }

        inProgressTable.setBackground(new java.awt.Color(2, 3, 16));
        inProgressTable.setFont(new java.awt.Font("Estrangelo Midyat", 0, 18)); // NOI18N
        inProgressTable.setForeground(new java.awt.Color(254, 254, 254));
        inProgressTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "In Progress"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inProgressTable.setDragEnabled(true);
        inProgressTable.setGridColor(new java.awt.Color(1, 1, 1));
        inProgressTable.getTableHeader().setReorderingAllowed(false);
        inProgressTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inProgressTableMouseClicked(evt);
            }
        });
        inProgressScroll.setViewportView(inProgressTable);
        if (inProgressTable.getColumnModel().getColumnCount() > 0) {
            inProgressTable.getColumnModel().getColumn(0).setResizable(false);
            inProgressTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        }

        doneTable.setBackground(new java.awt.Color(2, 3, 16));
        doneTable.setFont(new java.awt.Font("Estrangelo Midyat", 0, 18)); // NOI18N
        doneTable.setForeground(new java.awt.Color(254, 254, 254));
        doneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Done"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doneTable.setDragEnabled(true);
        doneTable.getTableHeader().setReorderingAllowed(false);
        doneTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneTableMouseClicked(evt);
            }
        });
        doneScroll.setViewportView(doneTable);
        if (doneTable.getColumnModel().getColumnCount() > 0) {
            doneTable.getColumnModel().getColumn(0).setResizable(false);
            doneTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        }

        createTaskButton.setBackground(new java.awt.Color(9, 2, 17));
        createTaskButton.setForeground(new java.awt.Color(195, 193, 254));
        createTaskButton.setText("Create Task");
        createTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTaskButtonActionPerformed(evt);
            }
        });

        logOutButton.setBackground(new java.awt.Color(9, 2, 17));
        logOutButton.setForeground(new java.awt.Color(195, 193, 254));
        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userSessionPanelLayout = new javax.swing.GroupLayout(userSessionPanel);
        userSessionPanel.setLayout(userSessionPanelLayout);
        userSessionPanelLayout.setHorizontalGroup(
            userSessionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userSessionPanelLayout.createSequentialGroup()
                .addComponent(toDoScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inProgressScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doneScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userSessionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createTaskButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 9, Short.MAX_VALUE))
            .addGroup(userSessionPanelLayout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        userSessionPanelLayout.setVerticalGroup(
            userSessionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userSessionPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userSessionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inProgressScroll)
                    .addComponent(doneScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(toDoScroll)
                    .addGroup(userSessionPanelLayout.createSequentialGroup()
                        .addComponent(createTaskButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logOutButton)))
                .addContainerGap())
        );

        mainPanel.add(userSessionPanel, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(795, 554));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 
    
    /**
     * 
     * @param username
     * the username to check
     * @param password
     * the password to match with the username
     * @return
     * returns true if the username and password combination is found,
     * returns false if it isn't.
     * @throws IOException 
     */
    private boolean authenticate(String username, String password) throws IOException{
        Scanner in = null;
        
        try{
            in = new Scanner(new BufferedReader(new FileReader("usersInfo.txt")));
            boolean found = false;
            String usernameFromFile;
            String passwordFromFile;
            
            if(!in.hasNext()){
                System.err.println("USERNAME FILE EMPTY. EXITING...");
                System.exit(1);
            }
            
            while(!found && in.hasNext()){
                usernameFromFile = in.next();
                if(usernameFromFile.equals(username)){
                    found = true;
                    if(!in.hasNext()){
                        System.err.println("USERNAME FILE FORMAT ERROR. EXITING...");
                        System.exit(1);
                    }
                    passwordFromFile = in.next();
                    if(passwordFromFile.equals(password))
                        return true;
                    else
                        return false;
                }
            }
        }finally{
            if(in!=null)
                in.close();
            else
                System.err.println("USERNAME FILE NEVER OPENED.");
        }
        
        return false;
    }
    
    /**
     * Logs the user out of his/her session, and clears the TaskLists and tables in preparation for the next session.
     */
    
    private void logOut(){
        try{taskLists.writeOut(username);
        } catch (IOException ex){
            System.err.println("USERFILE WRITEOUT ERROR");
        }
        taskLists = null;
        clearTables();
    }
    /**
     * clears each of the JTables, resetting them to be empty
     */
    private void clearTables(){
        DefaultTableModel m = (DefaultTableModel)toDoTable.getModel();
        m.setRowCount(0);
        m = (DefaultTableModel)inProgressTable.getModel();
        m.setRowCount(0);
        m = (DefaultTableModel)doneTable.getModel();
        m.setRowCount(0);
    }
    
    /**
     * Sets all the tables and buttons to invisible so they cannot be clicked
     */
    private void hideTables(){
        toDoTable.setVisible(false);
        inProgressTable.setVisible(false);
        doneTable.setVisible(false);
        logOutButton.setVisible(false);
        createTaskButton.setVisible(false);
    } 
    /**
     * Moves a selected task from the To-Do list to In-Progress list
     */
    public void moveToDoToInProg(){
        taskLists.moveToDoToInProg(toDoTable, inProgressTable);
    }
    /**
     * Moves a selected task from the In-Progress list to Done list
     */
    public void moveInProgToDone(){
        taskLists.moveInProgToDone(inProgressTable, doneTable);
    }
    /**
     * Deletes a task from the appropriate task list and table
     * @param listType 
     * the type of the list to be deleted: (1)todo, (2) inprogress, (2) done
     */
    public void deleteTask(int listType){
        DefaultTableModel m;
        int index;
        if(listType == 1){
            m = (DefaultTableModel)toDoTable.getModel();
            index = toDoTable.getSelectedRow();
        }
        else if(listType == 2){
            m = (DefaultTableModel)inProgressTable.getModel();
            index = inProgressTable.getSelectedRow();
        }
        else {
            m = (DefaultTableModel)doneTable.getModel();
            index = doneTable.getSelectedRow();
        }
        m.removeRow(index);
        taskLists.deleteTask(index, listType);
    }
    
    /**
     * Authenticates the username and password supplied to the JTextFields at the Log In screen. Starts user's session if authentication succeeds.
     * @param evt 
     * login button click event
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
       
        username = usernameTextField.getText();
        String password = new String(passwordField.getPassword());
        try{
                if(authenticate(username, password)){
                    
                    password = "";
                    passwordField.setText("");
                    usernameTextField.setText("");
                    authenticationErrorLabel.setText("Please enter username and password.");
                    taskLists = new TaskLists();
                    
                    try{
                            taskLists.populateLists(username);
                        }catch(IOException ex){
                            //System.out.println("Userfile Not Opened.");
                        }
                    
                    taskLists.populateTables(toDoTable, inProgressTable, doneTable);
        
                    
                    CardLayout cl = (CardLayout)mainPanel.getLayout();
                    cl.next(mainPanel);
                } else{
                    authenticationErrorLabel.setText("Username/Password incorrect");
                }
                    
            }catch(IOException ex){
                System.err.println("Error?");
            }
    }//GEN-LAST:event_loginButtonActionPerformed
/**
 * action that is performed when the exit button is clicked - exits the program
 * @param evt 
 * exit button click event
 */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
    }//GEN-LAST:event_passwordFieldActionPerformed

    /**
     * buttonaction to create a task. creates a new CreateTaskdDialog
     * @param evt 
     * event for when the create task button is clicked
     */
    private void createTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTaskButtonActionPerformed
                  
        hideTables();
        
        CreateTaskDialog createTaskDialog = new CreateTaskDialog(this, taskLists, toDoTable);
        createTaskDialog.setVisible(true);
        createTaskDialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        
        
    }//GEN-LAST:event_createTaskButtonActionPerformed
/**
 * button action to log out of the user's session
 * @param evt 
 * log out button click event
 */
    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        logOut();
        CardLayout cl = (CardLayout)mainPanel.getLayout();
                    cl.previous(mainPanel);
    }//GEN-LAST:event_logOutButtonActionPerformed
/**
 * This the method for when a Task in the To-Do table has been
clicked. It creates a ToDoDetailsDialog for the user to interact
with.
 */
    private void toDoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toDoTableMouseClicked
        DefaultTableModel m = (DefaultTableModel)toDoTable.getModel();
        Task theTask = (Task)m.getValueAt(toDoTable.getSelectedRow(),0);
        hideTables();

        ToDoDetailsDialog detailsDialog = new ToDoDetailsDialog(theTask, this, 1);
        detailsDialog.setVisible(true);
        detailsDialog.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        

    }//GEN-LAST:event_toDoTableMouseClicked

    /**
     * This the method for when a Task in the InProg table has been
    clicked. It creates a ToDoDetailsDialog for the user to interact
    with.
     */
    private void inProgressTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inProgressTableMouseClicked
        DefaultTableModel m = (DefaultTableModel)inProgressTable.getModel();
        Task theTask = (Task)m.getValueAt(inProgressTable.getSelectedRow(),0);
        hideTables();
               
        ToDoDetailsDialog detailsDialog = new ToDoDetailsDialog(theTask, this, 2);
        detailsDialog.setVisible(true);
        detailsDialog.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_inProgressTableMouseClicked

    /**
     * This the method for when a Task in the Done table has been
    clicked. It creates a ToDoDetailsDialog for the user to interact
    with.
     */
    private void doneTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneTableMouseClicked
        DefaultTableModel m = (DefaultTableModel)doneTable.getModel();
        Task theTask = (Task)m.getValueAt(doneTable.getSelectedRow(),0);
        hideTables();
        
        ToDoDetailsDialog detailsDialog = new ToDoDetailsDialog(theTask, this, 3);
        detailsDialog.setVisible(true);
        detailsDialog.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_doneTableMouseClicked

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
    }//GEN-LAST:event_passwordFieldKeyPressed


    /**
     * main function for MainFrame
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authenticationErrorLabel;
    private javax.swing.JButton createTaskButton;
    private javax.swing.JLabel dateDetail;
    private javax.swing.JLabel dateDetailLabel;
    private javax.swing.JScrollPane doneScroll;
    private javax.swing.JTable doneTable;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane inProgressScroll;
    private javax.swing.JTable inProgressTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JOptionPane jOptionPane2;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel mainTitleLabel;
    private javax.swing.JLabel nameDetail;
    private javax.swing.JLabel nameDetailLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel priorityDetail;
    private javax.swing.JLabel priorityDetailLabel;
    private javax.swing.JDialog taskDetailDialog;
    private javax.swing.JScrollPane toDoScroll;
    private javax.swing.JTable toDoTable;
    private javax.swing.JPanel userSessionPanel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
